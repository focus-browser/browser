diff --git a/browser/base/content/browser-sidebar.js b/browser/base/content/browser-sidebar.js
index c5ac301416d2d820ba95e21c0ce1fe305e63b554..41b22e5f816fad8ee98baae99314ead8ea6294e2 100644
--- a/browser/base/content/browser-sidebar.js
+++ b/browser/base/content/browser-sidebar.js
@@ -11,6 +11,10 @@ var SidebarUI = {
       return this._sidebars;
     }
 
+    /**
+     * @returns {Map<string, { title: string, url?: string, onclick?: string, menuId?: string, triggerButtonId?: string, iconurl: string, isBottom: boolean }>}
+     */
+
     function makeSidebar({ elementId, ...rest }) {
       return {
         get sourceL10nEl() {
@@ -19,6 +23,7 @@ var SidebarUI = {
         get title() {
           return document.getElementById(elementId).getAttribute("label");
         },
+        isBottom: false,
         ...rest,
       };
     }
@@ -30,6 +35,7 @@ var SidebarUI = {
           elementId: "sidebar-switcher-bookmarks",
           url: "chrome://browser/content/places/bookmarksSidebar.xhtml",
           menuId: "menu_bookmarksSidebar",
+          iconurl: "chrome://global/skin/icons/bookmark-outline.svg",
         }),
       ],
       [
@@ -39,6 +45,7 @@ var SidebarUI = {
           url: "chrome://browser/content/places/historySidebar.xhtml",
           menuId: "menu_historySidebar",
           triggerButtonId: "appMenuViewHistorySidebar",
+          iconurl: "chrome://browser/skin/history.svg",
         }),
       ],
       [
@@ -47,8 +54,37 @@ var SidebarUI = {
           elementId: "sidebar-switcher-tabs",
           url: "chrome://browser/content/syncedtabs/sidebar.xhtml",
           menuId: "menu_tabsSidebar",
+          iconurl: "chrome://browser/skin/tab.svg",
         }),
       ],
+      [
+        "viewDownloadsSidebar",
+        makeSidebar({
+          elementId: "sidebar-switcher-downloads",
+          title: "Downloads",
+          url: "about:downloads",
+          menuId: "menu_downloadsSidebar",
+          iconurl: "chrome://browser/skin/downloads/downloads.svg",
+        }),
+      ],
+      [
+        "sidebar-view-addons",
+        {
+          title: "Add-ons",
+          onclick: "BrowserOpenAddonsMgr();",
+          iconurl: "chrome://mozapps/skin/extensions/category-themes.svg",
+          isBottom: true,
+        },
+      ],
+      [
+        "sidebar-view-preferances",
+        {
+          title: "Preferences",
+          onclick: "openPreferences();",
+          iconurl: "chrome://global/skin/icons/settings.svg",
+          isBottom: true,
+        },
+      ],
     ]));
   },
 
@@ -61,7 +97,10 @@ var SidebarUI = {
     return (this._browser = document.getElementById("sidebar"));
   },
   POSITION_START_PREF: "sidebar.position_start",
+  SIDEBAR_TABS_PREF: "pulse.sidebar.enabled",
+  SIDEBAR_EXTENSIONS_PREF: "pulse.sidebar.extensions.enabled",
   DEFAULT_SIDEBAR_ID: "viewBookmarksSidebar",
+  SIDEBAR_KEEP_TABS_ACTIVE_PREF: "pulse.sidebar.keeptabsactive.enabled",
 
   // lastOpenedId is set in show() but unlike currentID it's not cleared out on hide
   // and isn't persisted across windows
@@ -76,8 +115,13 @@ var SidebarUI = {
     }
     return (this.__title = document.getElementById("sidebar-title"));
   },
+
   _splitter: null,
   _icon: null,
+  _sidebarIcons: null,
+  _sidebarIconsBottom: null,
+  /** @type {string[]} */
+  loadedSidebars: null,
   _reversePositionButton: null,
   _switcherPanel: null,
   _switcherTarget: null,
@@ -110,15 +154,59 @@ var SidebarUI = {
     this._switcherTarget = document.getElementById("sidebar-switcher-target");
     this._switcherArrow = document.getElementById("sidebar-switcher-arrow");
 
+    this._sidebarIcons = document.getElementById("sidebar-icons");
+    this._sidebarIconsBottom = document.getElementById("sidebar-icons-bottom");
+
     this._switcherTarget.addEventListener("command", () => {
       this.toggleSwitcherPanel();
     });
 
+    const sidebaritems = this.sidebars.keys();
+    const sidebarExtensionVis = Services.prefs.getBoolPref(
+      this.SIDEBAR_EXTENSIONS_PREF,
+      false
+    );
+
+    this._keepTabsActivePref = Services.prefs.getBoolPref(
+      this.SIDEBAR_KEEP_TABS_ACTIVE_PREF,
+      false
+    );
+
+    for (const sidebaritem of sidebaritems) {
+      if (this.sidebars.get(sidebaritem).extensionId && !sidebarExtensionVis) {
+        return;
+      }
+      this.createSidebarItem(sidebaritem, this.sidebars.get(sidebaritem), true);
+    }
+
+    let sidebarVisible = false;
+    if (window.toolbar.visible) {
+      sidebarVisible = Services.prefs.getBoolPref(this.SIDEBAR_TABS_PREF, true);
+    }
+
+    this.setSidebarVisibility(sidebarVisible);
+
+    // Keep track on the changes of the sidebar visibility
+    Services.prefs.addObserver(this.SIDEBAR_TABS_PREF, this);
+
+    Services.prefs.addObserver(this.SIDEBAR_KEEP_TABS_ACTIVE_PREF, this);
+
     this._inited = true;
 
     Services.obs.addObserver(this, "intl:app-locales-changed");
 
     this._initDeferred.resolve();
+
+    //Check the pre-existance of sidebar and if it is not there, create it
+    var sidebar = this.browser;
+    let sidebarExists = !!sidebar;
+    if (this._keepTabsActivePref && sidebarExists) {
+      sidebar.remove();
+    } else if (this._keepTabsActivePref && !sidebarExists) {
+      this.createBrowser("sidebar");
+    }
+
+    this.loadedSidebars = [];
   },
 
   uninit() {
@@ -127,7 +215,10 @@ var SidebarUI = {
     let enumerator = Services.wm.getEnumerator("navigator:browser");
     if (!enumerator.hasMoreElements()) {
       let xulStore = Services.xulStore;
-      xulStore.persist(this._box, "sidebarcommand");
+
+      if (!this._keepTabsActivePref) {
+        xulStore.persist(this._box, "sidebarcommand");
+      }
 
       if (this._box.hasAttribute("positionend")) {
         xulStore.persist(this._box, "positionend");
@@ -148,6 +239,12 @@ var SidebarUI = {
       xulStore.persist(this._title, "value");
     }
 
+    // Remove the sidebar seperator with class sidebar-divider
+    const sidebarDivider = document.querySelector(".sidebar-divider");
+    if (sidebarDivider) {
+      sidebarDivider.remove();
+    }
+
     Services.obs.removeObserver(this, "intl:app-locales-changed");
 
     if (this._observer) {
@@ -159,17 +256,47 @@ var SidebarUI = {
   /**
    * The handler for Services.obs.addObserver.
    **/
-  observe(_subject, topic, _data) {
+  observe(_subject, topic, data) {
     switch (topic) {
       case "intl:app-locales-changed": {
         if (this.isOpen) {
-          // The <tree> component used in history and bookmarks, but it does not
-          // support live switching the app locale. Reload the entire sidebar to
           // invalidate any old text.
           this.hide();
           this.showInitially(this.lastOpenedId);
-          break;
         }
+        break;
+      }
+
+      case "nsPref:changed": {
+        switch (data) {
+          case this.SIDEBAR_TABS_PREF:
+            this.setSidebarVisibility(
+              Services.prefs.getBoolPref(this.SIDEBAR_TABS_PREF, true)
+            );
+            break;
+
+          case this.SIDEBAR_KEEP_TABS_ACTIVE_PREF:
+            //Hide the sidebar if it is open
+            if (this.isOpen) {
+              this.hide();
+            }
+
+            this.uninit();
+
+            // We need to clean up all existing sidebar frames to prevent a memory leak.
+            for (const loadedSidebar of this.loadedSidebars) {
+              const elementId = `sidebar-browser-${loadedSidebar}`;
+              const element = document.getElementById(elementId);
+
+              if (element) {
+                element.remove();
+              }
+            }
+
+            this.init();
+            break;
+        }
+        break;
       }
     }
   },
@@ -286,6 +413,9 @@ var SidebarUI = {
     // First reset all ordinals to match DOM ordering.
     let browser = document.getElementById("browser");
     [...browser.children].forEach((node, i) => {
+      // Do not change ordinal on vertical tabs
+      if (node.id == 'TabsToolbar' || node.id == 'verticaltabs-splitter') return
+
       node.style.MozBoxOrdinalGroup = i + 1;
     });
 
@@ -485,6 +615,9 @@ var SidebarUI = {
   },
 
   _loadSidebarExtension(commandID) {
+    if (this._keepTabsActivePref && this.loadedSidebars.includes(commandID)) {
+      return;
+    }
     let sidebar = this.sidebars.get(commandID);
     let { extensionId } = sidebar;
     if (extensionId) {
@@ -523,6 +656,7 @@ var SidebarUI = {
       }
 
       this._fireFocusedEvent();
+      this.loadedSidebars.push(commandID);
       return true;
     });
   },
@@ -546,10 +680,28 @@ var SidebarUI = {
     }
     return this._show(commandID).then(() => {
       this._loadSidebarExtension(commandID);
+      this.loadedSidebars.push(commandID);
       return true;
     });
   },
 
+  //Create sidebar browser between active and inactive for persistence reasons
+  createBrowser(id, commandID) {
+    let browser = document.createXULElement("browser");
+    browser.setAttribute("id", id);
+    browser.setAttribute("autoscroll", "false");
+    browser.setAttribute("disablehistory", "true");
+    browser.setAttribute("disablefullscreen", "true");
+    browser.setAttribute("tooltip", "aHTMLTooltip");
+    browser.setAttribute("class", "sidebar-tab");
+    if (commandID) {
+      browser.setAttribute("sidebarcommand", commandID);
+    }
+    browser.setAttribute("style", "min-width: 14em; -moz-box-flex: 1;");
+    this._box.appendChild(browser);
+    this._browser = browser;
+  },
+
   /**
    * Implementation for show. Also used internally for sidebars that are shown
    * when a window is opened and we don't want to ping telemetry.
@@ -559,6 +711,29 @@ var SidebarUI = {
    */
   _show(commandID) {
     return new Promise(resolve => {
+      if (this._keepTabsActivePref) {
+        const elementId = `sidebar-browser-${commandID}`;
+
+        //try and find browser with id sidebar-browser-<commandid>
+        if (!document.getElementById(elementId)) {
+          this.createBrowser(elementId, commandID);
+        } else {
+          //browser already exists, get it
+          let browser = document.getElementById(elementId);
+          this._browser = browser;
+        }
+
+        let browsers = document.querySelectorAll("[id^='sidebar-browser-']");
+        //hide all of them except the one we want to show
+        for (let i = 0; i < browsers.length; i++) {
+          if (browsers[i].id != "sidebar-browser-" + commandID) {
+            browsers[i].setAttribute("hidden", "true");
+          } else {
+            browsers[i].removeAttribute("hidden");
+          }
+        }
+      }
+
       this.selectMenuItem(commandID);
 
       this._box.hidden = this._splitter.hidden = false;
@@ -570,13 +745,21 @@ var SidebarUI = {
       this._box.setAttribute("sidebarcommand", commandID);
       this.lastOpenedId = commandID;
 
+      // Pulse: Reset sidebar margin to zero to allow for correct animations to
+      // take place (adapted from dot browser, se below)
+      this._box.style.marginLeft = "0px";
+
       let { url, title, sourceL10nEl } = this.sidebars.get(commandID);
       this.title = title;
       // Keep the title element in sync with any l10n changes.
       this.observeTitleChanges(sourceL10nEl);
       this.browser.setAttribute("src", url); // kick off async load
-
-      if (this.browser.contentDocument.location.href != url) {
+      if (
+        (!this.loadedSidebars.includes(commandID) &&
+          this._keepTabsActivePref) ||
+        ((this.browser.contentDocument.location.href != url || null) &&
+          !this._keepTabsActivePref)
+      ) {
         this.browser.addEventListener(
           "load",
           event => {
@@ -615,22 +798,46 @@ var SidebarUI = {
 
     this.selectMenuItem("");
 
+    // The below code was, in part, based on Dot Browser's source code
+    // https://github.com/dothq/browser-desktop/blob/3c6b992af8946e1c30180cc824a78d4bb85ba868/patches/browser-base-content-browser-sidebar-js.patch#L183
+
+    // Pulse Browser: Helper stuff for sidebar animation. We can fake sliding in
+    // and out by changing the left margin to be a negative value. Then, inside
+    // of our css code, we can animate it to close.
+    this._box.style.marginLeft = `${-Math.abs(
+      this._box.getBoundingClientRect().width
+    )}px`;
+
+    // We want to fully set it to hidden to slightly improve browser performance
+    // when it is hidden. Note that this replaces some of Mozilla's code that
+    // would generally be down below
+    setTimeout(() => {
+      this._box.hidden = true;
+      this._splitter.hidden = true;
+
+      this._box.removeAttribute("checked");
+    }, 170);
+
     // Replace the document currently displayed in the sidebar with about:blank
     // so that we can free memory by unloading the page. We need to explicitly
     // create a new content viewer because the old one doesn't get destroyed
     // until about:blank has loaded (which does not happen as long as the
     // element is hidden).
-    this.browser.setAttribute("src", "about:blank");
-    this.browser.docShell.createAboutBlankContentViewer(null, null);
+
+    if (!this._keepTabsActivePref) {
+      this.browser.setAttribute("src", "about:blank");
+      this.browser.docShell.createAboutBlankContentViewer(null, null);
+    }
 
     this._box.removeAttribute("checked");
     this._box.hidden = this._splitter.hidden = true;
+    this._sidebarIcons.removeAttribute("checked");
 
-    let selBrowser = gBrowser.selectedBrowser;
-    selBrowser.focus();
-    if (triggerNode) {
-      updateToggleControlLabel(triggerNode);
-    }
+    // let selBrowser = gBrowser.selectedBrowser;
+    // selBrowser.focus();
+    // if (triggerNode) {
+    //   updateToggleControlLabel(triggerNode);
+    // }
   },
 
   /**
@@ -638,25 +845,121 @@ var SidebarUI = {
    * none if the argument is an empty string.
    */
   selectMenuItem(commandID) {
+    // Pulse modification: This needs to update both which sidebar item is
+    // checked and which dropdown item is checked. Hence, we are overriding this
+    // method.
     for (let [id, { menuId, triggerButtonId }] of this.sidebars) {
+      if (!menuId) {
+        continue;
+      }
       let menu = document.getElementById(menuId);
-      let triggerbutton =
+
+      const dropdownTriggerButton =
         triggerButtonId && document.getElementById(triggerButtonId);
+      let sidebarTriggerButton = document.getElementById(
+        "sidebar-background-" + id
+      );
+
+      setCheckedForItem(id, menu, sidebarTriggerButton);
+      setCheckedForItem(id, menu, dropdownTriggerButton);
+    }
+
+    function setCheckedForItem(id, menu, sidebarTriggureButton) {
       if (id == commandID) {
         menu.setAttribute("checked", "true");
-        if (triggerbutton) {
-          triggerbutton.setAttribute("checked", "true");
-          updateToggleControlLabel(triggerbutton);
+        if (sidebarTriggureButton) {
+          sidebarTriggureButton.setAttribute("checked", "true");
+          updateToggleControlLabel(sidebarTriggureButton);
         }
       } else {
         menu.removeAttribute("checked");
-        if (triggerbutton) {
-          triggerbutton.removeAttribute("checked");
-          updateToggleControlLabel(triggerbutton);
+        if (sidebarTriggureButton) {
+          sidebarTriggureButton.removeAttribute("checked");
+          updateToggleControlLabel(sidebarTriggureButton);
         }
       }
     }
   },
+
+  // ===========================================================================
+  // Pulse sidebar
+
+  /**
+   * Set the sidebar tabs to be visible or not visible
+   * @param {boolean} visible Sets the sidebar to be visible or not visible
+   */
+  setSidebarVisibility(visible) {
+    const sidebarContainer = document.getElementById("sidebar-container");
+
+    if (visible) {
+      sidebarContainer.style.display = "flex";
+    } else {
+      sidebarContainer.style.display = "none";
+    }
+  },
+
+  async createSidebarItem(id, config, isinit = false) {
+    if (!isinit) {
+      await this.promiseDeferred;
+    }
+
+    // if the sidebar item is already created, do nothing
+    if (document.getElementById(`sidebar-background-${id}`)) {
+      document.getElementById(`sidebar-background-${id}`).remove();
+    }
+
+    //if id contains ext
+    if (id.includes("ext")) {
+      if (!document.getElementsByClassName("sidebar-divider").length) {
+        const divider = document.createElement("hr");
+        divider.classList.add("sidebar-divider");
+        this._sidebarIcons.appendChild(divider);
+      }
+    }
+
+    const background = document.createXULElement("vbox");
+    background.classList.add("sidebar-item-background");
+    background.setAttribute("id", `sidebar-background-${id}`);
+
+    if (config.url) {
+      background.onclick = () => {
+        this.toggle(id);
+      };
+    }
+
+    if (config.onclick) {
+      background.setAttribute("onclick", config.onclick);
+    }
+
+    const iconEl = document.createElement("image");
+    iconEl.setAttribute("id", `sidebar-icon-${id}`);
+    iconEl.setAttribute("src", `${config.iconurl}`);
+    iconEl.style.backgroundImage = `url(${config.iconurl})`;
+
+    background.append(iconEl);
+
+    //If the item is meant to be on bottom, add it to the bottom
+    if (config.isBottom) {
+      this._sidebarIconsBottom.appendChild(background);
+    } else {
+      this._sidebarIcons.appendChild(background);
+    }
+
+    setTimeout(() => {
+      iconEl.setAttribute("class", "sidebar-icon-item");
+    }, 100);
+  },
+
+  deleteSidebarItem(id) {
+    const background = document.getElementById(`sidebar-background-${id}`);
+    const icon = document.getElementById(`sidebar-icon-${id}`);
+    if (background) {
+      background.remove();
+    }
+    if (icon) {
+      icon.remove();
+    }
+  },
 };
 
 // Add getters related to the position here, since we will want them
